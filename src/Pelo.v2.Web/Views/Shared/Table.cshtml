@model DataTablesModel
@using System.Net
@using Pelo.v2.Web.Models.Datatables
@functions
{
string GetUrl(DataUrl dataUrl)
{
    return !string.IsNullOrEmpty(dataUrl?.ActionName) && !string.IsNullOrEmpty(dataUrl.ControllerName)
        ? Url.Action(dataUrl.ActionName, dataUrl.ControllerName, dataUrl.RouteValues)
        : !string.IsNullOrEmpty(dataUrl.Url)
        ? $"{(dataUrl.Url.StartsWith("~/", StringComparison.Ordinal) ? Url.Content(dataUrl.Url) : dataUrl.Url).TrimEnd('/')}" + (!dataUrl.TrimEnd ? "/" : "")
        : string.Empty;
}
}
<table class="display table table-bordered" width="100%" id="@Model.Name">
    @if (Model.FooterColumns > 0)
    {
        //You need to add the footer before you create the table
        //as DataTables doesn't provide a method for creating a footer at the moment
    <tfoot>
        <tr>
            @for (int i = 0; i < Model.FooterColumns; i++)
                {
            <td></td>
                }
        </tr>
    </tfoot>
    }
</table>
@{
    //check using MasterCheckBox
    var isMasterCheckBoxUsed = Model.ColumnCollection.Any(x => x.IsMasterCheckBox);
    //Model name for js function names
    var model_name = Model.Name.Replace("-", "_");
}

<script>
    @if (isMasterCheckBoxUsed)
    {
        //selectedIds - This variable will be used on views. It can not be renamed
        <text>
    var selectedIds = [];

    function updateMasterCheckbox() {
        var numChkBoxes = $('#@Model.Name input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]').length;
        var numChkBoxesChecked = $('#@Model.Name input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]:checked').length;
        $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
    }
        </text>
    }

    function updateTable(tableSelector) {
        $(tableSelector).DataTable().ajax.reload();
        if (@isMasterCheckBoxUsed.ToString().ToLower()) {
            $('#mastercheckbox').attr('checked', false).change();
            selectedIds = [];
        }
    }

    function reloadData() {
        $('#@Model.Name').DataTable().ajax.reload();
        $('.checkboxGroups').attr('checked', false).change();
        selectedIds = [];
        return false;
    }

    var datatable=null;
   
    $(document).ready(function () {

        datatable = $('#@Model.Name').DataTable({
                @await Html.PartialAsync("_Table.Definition", Model)
        });

        $.fn.dataTable.ext.errMode = function ( settings, helpPage, message ) { 
            console.log(message);
            $.notify({
                    // options
                    message: '<table><tr><td nowrap="nowrap">Error :</td><td nowrap="nowrap">'+message+'</td></tr></table>'
                }, {
                    // settings
                    type: 'danger',
                    placement: {
                            from: 'bottom',
                            align: 'right',
                            animate: {
                                    enter: 'animated fadeInDown',
                                    exit: 'animated fadeOutUp'
                                }
                        }
                });
        };

        $('#show-hide-sidebar-toggle').on('click', function() {
            if(datatable!=null) {
                setTimeout(function() {$($.fn.dataTable.tables(true)).DataTable().columns.adjust().draw();},200);
            }
        });
        $('.control-panel-toggle').on('click', function() {
            if(datatable!=null) {
                setTimeout(function() {$($.fn.dataTable.tables(true)).DataTable().columns.adjust().draw();},200);
            }
        });

        @if (!string.IsNullOrEmpty(Model.SearchButtonId))
        {
            <text>
                $('#@Model.SearchButtonId').click(function() {reloadData();});
            </text>
        }
        @if (isMasterCheckBoxUsed)
        {
            <text>
                //$('#mastercheckbox').click(function () {
                //    $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
                //});

                $('#@Model.Name').on('change', 'input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]', function (e) {
                    var $check = $(this);
                    var checked = jQuery.inArray($check.val(), selectedIds);
                    if ($check.is(':checked') == true) {
                        if (checked == -1) {
                            selectedIds.push($check.val());
                        }
                    } else if (checked > -1) {
                        selectedIds = $.grep(selectedIds, function (item, index) {
                            return item != $check.val();
                        });
                    }
                    updateMasterCheckbox();
                });
            </text>
        }
    });
</script>
@if ((Model.UrlDelete != null) || (Model.ChildTable?.UrlDelete != null))
{
    <text>
        <script>
            function table_deletedata_@(model_name)(dataId) {
                if (confirm('Bạn có chắc chắn muốn xóa dữ liệu này không?')) {
                    var postData = {
                            @if (!string.IsNullOrEmpty(Model.BindColumnNameActionDelete))
                            {
                                <text>
                            @Model.BindColumnNameActionDelete: dataId
                                </text>
                            }
                            else
                            {
                                <text>
                                    id: dataId
                                </text>
                            }
                        };

                    $.ajax({
                            url: "@Html.Raw(GetUrl((Model.ChildTable?.UrlDelete != null) ? Model.ChildTable?.UrlDelete : Model.UrlDelete))",
                            type: "@WebRequestMethods.Http.Post",
                            dataType: "json",
                            data: postData,
                            success: function (data, textStatus, jqXHR) {
                                showNotification(data);
                                if (data.data===true) {
                                    //refresh grid
                                    $('#@Model.Name').DataTable().draw(false);
                                }
                                
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                alert(errorThrown);
                            }
                        });
                }
                else {
                    return false;
                }
            }
        </script>
    </text>
}