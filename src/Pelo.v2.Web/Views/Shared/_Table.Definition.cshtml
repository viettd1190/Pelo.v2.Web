@using System.Net
@using System.Text.Encodings.Web
@using Pelo.v2.Web.Models.Datatables
@using Pelo.v2.Web.Models.Datatables.Render
@model Pelo.v2.Web.Models.Datatables.DataTablesModel

@{
    //the locale which MomentJS should use - the default is en (English).
    var locale = "en";

    //Model name for js function names
    var model_name = Model.Name.Replace("-",
                                        "_");
}

@functions
{

    string GetUrl(DataUrl dataUrl)
    {
        return !string.IsNullOrEmpty(dataUrl?.ActionName) && !string.IsNullOrEmpty(dataUrl.ControllerName)
                       ? Url.Action(dataUrl.ActionName,
                                    dataUrl.ControllerName,
                                    dataUrl.RouteValues)
                       : !string.IsNullOrEmpty(dataUrl.Url)
                                 ? $"{(dataUrl.Url.StartsWith("~/", StringComparison.Ordinal) ? Url.Content(dataUrl.Url) : dataUrl.Url).TrimEnd('/')}" + (!dataUrl.TrimEnd
                                                                                                                                                                  ? "/"
                                                                                                                                                                  : "")
                                 : string.Empty;
    }

}

@if (!string.IsNullOrEmpty(Model.HeaderCallback))
{
    <text>
        headerCallback: function (tfoot, data, start, end, display) {
        return @(Model.HeaderCallback)(tfoot, data, start, end, display);
        },
    </text>
}
@if (!string.IsNullOrEmpty(Model.RowCallback))
{
    <text>
        rowCallback: function (row, data) {
        return @(Model.RowCallback)(row, data);
        },
    </text>
}
@if (!string.IsNullOrEmpty(Model.DrawCallback))
{
    <text>
        drawCallback: function (settings, json) {
        return @(Model.DrawCallback)(settings, json);
        },
    </text>
}
@if (!string.IsNullOrEmpty(Model.FooterCallback))
{
    <text>
        footerCallback: function (tfoot, data, start, end, display) {
        return @(Model.FooterCallback)(tfoot, data, start, end, display);
        },
    </text>
}
@if (Model.Processing)
{
    <text>
        processing: @Model.Processing.ToString().ToLower(),
    </text>
}
@if (Model.ServerSide)
{
    <text>
        serverSide: @Model.ServerSide.ToString().ToLower(),
    </text>
}
@if (Model.Data != null)
{
    <text>
        data: @Html.Raw(Model.Data.ToString()),
    </text>
}
else
{
    <text>
        ajax:
        {
        url: "@Html.Raw(GetUrl(Model.UrlRead))",
        type: "@WebRequestMethods.Http.Post",
        dataType: "json",
        dataSrc: "data",
        data: function(data) {
        @if (Model.Filters != null)
        {
            foreach (var filter in Model.Filters)
            {
                if (filter.Type == typeof(string))
                {
                    if (Model.IsChildTable
                       && !string.IsNullOrEmpty(filter.ParentName))
                    {
                        <text>
                        data.@filter.Name = row.data().@filter.ParentName;
    </text>
    continue;
}

if (!string.IsNullOrEmpty(filter.ModelName))
{
    <text>
        data.@filter.Name = $('#@(filter.ModelName)_@filter.Name').val();
    </text>
}
else
{
    <text>
        data.@filter.Name = $('#@filter.Name').val();
    </text>
}
continue;
}
if (filter.Type == typeof(bool))
{
<text>
    data.@filter.Name = $('#@filter.Name').is(':checked');
</text>
continue;
}
if (filter.Type == typeof(int))
{
if (int.TryParse(filter.Value.ToString(),
                out int val))
{
    <text>
        data.@filter.Name = @val;
    </text>
}
}
}
}
        return data;
        }
        },
        </text>
    }
scrollX: true,
info: @Model.Info.ToString().ToLower(),
paging: @Model.Paging.ToString().ToLower(),
pagingType: '@Model.PagingType',
ordering: @Model.Ordering.ToString().ToLower(),
columns: [
@for (int i = 0; i < Model.ColumnCollection.Count; i++)
{
    var column = Model.ColumnCollection[i];
    <text>
        {
        @if (!string.IsNullOrEmpty(column.Title)
&& !column.IsMasterCheckBox)
        {
            <text>
            title: '@JavaScriptEncoder.Default.Encode(column.Title)',
    </text>
}
else
{
    if (!string.IsNullOrEmpty(column.Title)
       && column.IsMasterCheckBox)
    {
        <text>
            title: '
            <div class="checkbox">
                <label>
                    <input id="mastercheckbox" type="checkbox" />@JavaScriptEncoder.Default.Encode(column.Title)
                </label>
            </div>',
        </text>
    }
    else
    {
        if (string.IsNullOrEmpty(column.Title)
           && column.IsMasterCheckBox)
        {
            <text>
                title: '
                <input id="mastercheckbox" type="checkbox" />',
            </text>
        }
    }
}
        width: '@column.Width',
        visible: @column.Visible.ToString().ToLower(),
        searchable: @column.Searchable.ToString().ToLower(),
        orderable: @column.Orderable.ToString().ToLower(),
        @if (column.AutoWidth)
        {
            <text>
                autoWidth: @column.AutoWidth.ToString().ToLower(),
            </text>
        }
        @if (!string.IsNullOrEmpty(column.ClassName))
        {
            <text>
                className: '@column.ClassName',
            </text>
        }

        @switch (column.Render)
        {
            case RenderLink link:
                <text>
                    render: function (data, type, row, meta) {
                    var textRenderer = $.fn.dataTable.render.text().display;
                    @if (!string.IsNullOrEmpty(link.Title))
                    {
                        <text>
                        return '<a href="@GetUrl(link.Url)' + textRenderer(row.@link.Url.DataId) + '">@JavaScriptEncoder.Default.Encode(link.Title)</a>';
                </text>
            }
            else
            {
                <text>
                    return '<a href="@GetUrl(link.Url)' + textRenderer(row.@link.Url.DataId) + '">' + textRenderer(data) + '</a>';
                </text>
            }
                    },
                    </text>
                    break;
                case RenderDate date:
                    <text>
                        render: function (data, type, row, meta) {
                        return (data) ? moment(data).locale('@locale').format('@date.Format') : null;
                        },
                    </text>
                    break;
                case RenderButtonRemove button:
                    <text>
                        render: function (data, type, row, meta) {
                        return '<a href="#" class="@button.ClassName" onclick="table_deletedata_@(model_name)(\'' + data + '\');return false;"><i class="fa fa-remove"></i></a>';
                        },
                    </text>
                    break;
                case RenderButtonEdit buttonEdit:
                    <text>
                        render: function (data, type, row, meta) {
                        return '<a class="@buttonEdit.ClassName" href="@GetUrl(buttonEdit.Url)' + data + '"><i class="fa fa-pencil"></i></a>';
                        },
                    </text>
                    break;
                case RenderButtonView buttonView:
                    <text>
                        render: function (data, type, row, meta) {
                        return '<a class="@buttonView.ClassName" href="@GetUrl(buttonView.Url)' + data + '"><i class="fa fa-eye"></i>View</a>';
                        },
                    </text>
                    break;
                case RenderButtonCustom buttonCustom:
                    if (!string.IsNullOrEmpty(buttonCustom.Url))
                    {
                        <text>
                            render: function (data, type, row, meta) {
                            return '<a class="@buttonCustom.ClassName" href="@buttonCustom.Url' + data + '">@JavaScriptEncoder.Default.Encode(buttonCustom.Title)</a>';
                            },
                        </text>
                    }
                    if (!string.IsNullOrEmpty(buttonCustom.OnClickFunctionName))
                    {
                        <text>
                            render: function (data, type, row, meta) {
                            return '<a class="@buttonCustom.ClassName" onclick="@buttonCustom.OnClickFunctionName;' + '(' + data + ');">@JavaScriptEncoder.Default.Encode(buttonCustom.Title)</a>';
                            },
                        </text>
                    }
                    break;
                case RenderCheckBox checkBox:
                    <text>
                        render: function (data, type, row, meta) {
                        return row==null?<div class="checkbox" style="margin:auto;"><input name="@checkBox.Name" value="' + row.Id + '" type="checkbox" /><label></label></div>:(data === true)
                        ? '<div class="checkbox" style="margin:auto;text-align:center;"><input name="@checkBox.Name" value="' + row.Id + '" type="checkbox" checked="checked" /><label></label></div>'
                        : '<div class="checkbox" style="margin:auto;text-align:center"><input name="@checkBox.Name" value="' + row.Id + '" type="checkbox" /><label></label></div>';
                        },
                    </text>
                    break;

                case RenderCustom custom:
                    <text>
                        render: function (data, type, row, meta) {
                        return @(custom.FunctionName)(data, type, row, meta);
                        },
                    </text>
                    break;
            }
        data: '@column.Data'
        }
        @if (i != Model.ColumnCollection.Count - 1)
        {
            <text>,</text>
        }
        </text>
    }
                    ]
